#include "ClapTrap.hpp"

/*subject rules
When ClapTrap attacks, it causes its target to lose <attack damage> hit points.
When ClapTrap repairs itself, it regains <amount> hit points.
Attacking and repairing each cost 1 energy point.
ClapTrap canâ€™t do anything if it has no hit points or energy points left.
*/

static void displayClapTrapInfo(const ClapTrap &clapTrap)
{
	std::cout << "ï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œ [STATUS] ï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œ" << std::endl;
	std::cout << "Name: " << clapTrap.getName() << std::endl;
	std::cout << "Hit Points: " << clapTrap.getHitPoints() << std::endl;
	std::cout << "Energy Points: " << clapTrap.getEnergyPoints() << std::endl;
	std::cout << "Attack Damage: " << clapTrap.getAttackDamage() << std::endl;
	std::cout << "ï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œï¹Œ" << std::endl;
}

int main(void)
{
	ClapTrap robot("Clappy");
	displayClapTrapInfo(robot);

	// 1. Attaque d'un objet
	std::cout << "ðŸ”¸ [ACTION] Clappy attaque une boÃ®te en carton :" << std::endl;
	robot.attack("a cardboard box");
	displayClapTrapInfo(robot);

	// 2. RÃ©paration
	std::cout << "ðŸ”¸ [ACTION] Clappy tente de se rÃ©parer (5 HP) :" << std::endl;
	robot.beRepaired(5);
	displayClapTrapInfo(robot);

	// 3. DÃ©gÃ¢ts subis
	std::cout << "ðŸ”¸ [ACTION] Clappy subit 7 points de dÃ©gÃ¢ts :" << std::endl;
	robot.takeDamage(7);
	displayClapTrapInfo(robot);

	// 4. Attaque rÃ©pÃ©tÃ©e jusqu'Ã  Ã©puisement de l'Ã©nergie
	std::cout << "ðŸ”¸ [ACTION] Clappy attaque jusqu'Ã  Ã©puisement d'Ã©nergie :" << std::endl;
	for (int i = 0; i < 7; ++i)
	{
		robot.attack("dummy target");
	}
	displayClapTrapInfo(robot);

	// 5. Tentative de rÃ©paration sans Ã©nergie
	std::cout << "ðŸ”¸ [ACTION] Clappy essaie de se rÃ©parer (3 HP) sans Ã©nergie :" << std::endl;
	robot.beRepaired(3);
	displayClapTrapInfo(robot);

	// 6. Prendre suffisamment de dÃ©gÃ¢ts pour mourir
	std::cout << "ðŸ”¸ [ACTION] Clappy subit 10 points de dÃ©gÃ¢ts (devrait mourir) :" << std::endl;
	robot.takeDamage(10);
	displayClapTrapInfo(robot);

	// 7. DÃ©gÃ¢t supplÃ©mentaire (inutile mais on teste la robustesse)
	std::cout << "ðŸ”¸ [ACTION] Clappy subit encore 1 point de dÃ©gÃ¢ts :" << std::endl;
	robot.takeDamage(1);
	displayClapTrapInfo(robot);

	// 8. Tentative d'attaque aprÃ¨s la mort
	std::cout << "ðŸ”¸ [ACTION] Clappy essaie d'attaquer aprÃ¨s la mort :" << std::endl;
	robot.attack("ghost target");
	displayClapTrapInfo(robot);

	// 9. Tentative de rÃ©paration aprÃ¨s la mort
	std::cout << "ðŸ”¸ [ACTION] Clappy essaie de se rÃ©parer aprÃ¨s la mort (10 HP) :" << std::endl;
	robot.beRepaired(10);
	displayClapTrapInfo(robot);

	std::cout << "ðŸ§¨ [FIN] ClapTrap va Ãªtre dÃ©truit (sortie de portÃ©e)" << std::endl;
	return 0;
}
// // CrÃ©ation d'un ClapTrap
// ClapTrap robot("Clappy");

// std::cout << std::endl;

// // Attaque
// robot.attack("a cardboard box");

// // RÃ©paration
// robot.beRepaired(5);

// // Encaisse des dÃ©gÃ¢ts
// robot.takeDamage(7);

// // Essaie dâ€™attaquer jusquâ€™Ã  ce que lâ€™Ã©nergie tombe Ã  0
// for (int i = 0; i < 10; ++i)
// {
// 	robot.attack("dummy target");
// }

// // Essaie de se rÃ©parer sans Ã©nergie
// robot.beRepaired(3);

// // Inflige assez de dÃ©gÃ¢ts pour "tuer" Clappy
// robot.takeDamage(10);

// // Essaie dâ€™attaquer et de rÃ©parer aprÃ¨s la mort
// robot.attack("ghost target");
// robot.beRepaired(10);
